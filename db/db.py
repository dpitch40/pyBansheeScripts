import abc

from core.metadata import Metadata
from core.mw import MappingWrapper

class MusicDb(Metadata):
    """Base class for metadata derived from a database/data file, e.g. one generated by a music player."""

    sigil = '*'

    all_keys = Metadata.all_keys + ('bitrate',
                                    'rating',
                                    'play_count',
                                    'skip_count',
                                    'last_played',
                                    'last_skipped',
                                    'date_added',
                                    'location')

    format_lines = ['%(title)s - %(artist)s - %(album)s (%(album_artist)s) - %(genre)s',
                    '%(tn)s/%(tc)s, %(dn)s/%(dc)s\t%(year)s\t%(length)ss\t%(bitrate)skbps\t'
                        '%(rating)s/5, %(play_count)s plays, %(skip_count)s skips',
                    'Added %(date_added)s, last played %(last_played)s, last skipped %(last_skipped)s',
                    '%(location)s']

    read_only_keys = ('bitrate', 'length') # Location not read-only

    def __init__(self, d):
        super(MusicDb, self).__init__(d)

    def _format_dict(self):
        d = super(MusicDb, self)._format_dict()
        if d['bitrate']:
            d['bitrate'] = d['bitrate'] / 1000
            if d['bitrate'] % 1 == 0:
                d['bitrate'] = int(d['bitrate'])
        for k in ('last_played',
                  'last_skipped',
                  'date_added'):
            if d[k]:
                d[k] = d[k].strftime('%Y-%m-%d %H:%M:%S')
        return d

    @abc.abstractmethod
    def save(self):
        raise NotImplementedError

    @classmethod
    @abc.abstractmethod
    def commit(self):
        raise NotImplementedError

    @classmethod
    @abc.abstractmethod
    def load_all(self):
        raise NotImplementedError

    @classmethod
    @abc.abstractmethod
    def from_file(cls, loc):
        raise NotImplementedError
