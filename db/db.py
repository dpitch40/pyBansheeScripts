import abc

from core.file_based import FileBased

class MusicDb(FileBased):
    """Base class for metadata derived from a database/data file, e.g. one generated by a music player."""

    sigil = '*'

    db_fields = ('rating',
                 'play_count',
                 'skip_count',
                 'last_played',
                 'last_skipped',
                 'date_added')

    all_keys = FileBased.all_keys + db_fields + ('bitrate',
                                                 'location',
                                                 'fsize') # File size in bytes

    format_lines = [('title', 'album', 'album_artist', 'artist', 'performer', 'genre', 'grouping'),
                    ('tnc', 'dnc', 'year', 'length', 'bitrate', 'fsize', 'rating', 'play_count', 'skip_count'),
                    ('date_added', 'last_played', 'last_skipped'),
                    ('location',)]

    read_only_keys = ()

    def __init__(self, d):
        super(MusicDb, self).__init__(d)

    # To be overridden

    @classmethod
    @abc.abstractmethod
    def commit(self):
        """Commits the object's database. Call this after after calling save()
           to write the changes back to the database file."""
        raise NotImplementedError

    @classmethod
    @abc.abstractmethod
    def load_all(self):
        """Returns a list of all instances of this object in the corresponding database."""
        raise NotImplementedError

    @classmethod
    @abc.abstractmethod
    def load_playlists(cls):
        """For all playlists, loads and returns a mapping from playlist name to a list
           of MusicDb instances corresponding to the tracks in that playlist. NOTE: Multiple
           playlists can contain references to the same object."""
        raise NotImplementedError

    @classmethod
    @abc.abstractmethod
    def from_file(cls, loc):
        """Initializes and returns a new object of this class from a file, or None if not matched."""
        raise NotImplementedError

    @classmethod
    @abc.abstractmethod
    def from_metadata(cls, metadata):
        """Attempts to match a single song in the DB with the given metadata object. Creates a new
            object of this class and returns it, or None if not matched."""
        raise NotImplementedError
