import abc

from core.file_based import FileBased

class MusicDb(FileBased):
    """Base class for metadata derived from a database/data file, e.g. one generated by a music player."""

    sigil = '*'

    all_keys = FileBased.all_keys + ('bitrate',
                                     'rating',
                                     'play_count',
                                     'skip_count',
                                     'last_played',
                                     'last_skipped',
                                     'date_added',
                                     'location',
                                     'fsize') # File size in bytes

    format_lines = ['%(title)s - %(artist)s - %(album)s (%(album_artist)s) - %(genre)s',
                    '%(tn)s/%(tc)s, %(dn)s/%(dc)s\t%(year)s\t%(length)ss\t%(bitrate)skbps\t%(fsize)s\t'
                        '%(rating)s/5, %(play_count)s plays, %(skip_count)s skips',
                    'Added %(date_added)s, last played %(last_played)s, last skipped %(last_skipped)s',
                    '%(location)s']

    read_only_keys = ()

    def __init__(self, d):
        super(MusicDb, self).__init__(d)

    # String formatting

    def _format_dict(self):
        d = super(MusicDb, self)._format_dict()
        for k in ('last_played',
                  'last_skipped',
                  'date_added'):
            if d[k]:
                d[k] = d[k].strftime('%Y-%m-%d %H:%M:%S')
        return d

    def _format_bitrate(self, bitrate):
        bitrate = bitrate / 1000
        if bitrate % 1 == 0:
            bitrate = int(bitrate)
        return bitrate

    def _format_fsize(self, fsize):
        return '%.2fMB' % (fsize / 1000000)

    # To be overridden

    @classmethod
    @abc.abstractmethod
    def commit(self):
        """Commits the object's database. Call this after after calling save()
           to write the changes back to the database file."""
        raise NotImplementedError

    @classmethod
    @abc.abstractmethod
    def load_all(self):
        """Returns a list of all instances of this object in the corresponding database."""
        raise NotImplementedError

    @classmethod
    @abc.abstractmethod
    def load_playlists(cls):
        """For all playlists, loads and returns a mapping from playlist name to a list
           of MusicDb instances corresponding to the tracks in that playlist. NOTE: Multiple
           playlists can contain references to the same object."""
        raise NotImplementedError

    @classmethod
    @abc.abstractmethod
    def from_file(cls, loc):
        """Initializes and returns a new object of this class from a file, or None if not matched."""
        raise NotImplementedError

    @classmethod
    @abc.abstractmethod
    def from_metadata(cls, metadata):
        """Attempts to match a single song in the DB with the given metadata object. Creates a new
            object of this class and returns it, or None if not matched."""
        raise NotImplementedError
